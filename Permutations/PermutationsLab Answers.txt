	Brian Hauck
1)
	Every value in perm is 0.
2)
	The array is filled with values 0-5. 0 should not be there. 
	This is due to 
	nextInt() including 0 and excluding the upper bound. 
	When setting the value of next, you need to add 1.
3)
	They all result in the same values 1-6 in random assortment.
4)
	p.algorithm1(data); int[] sizes = {125,250,500,1000,2000,4000,8000,16000}
	125, 807, 0.0
	250, 1687, 0.0
	500, 3722, 0.0
	1000, 8727, 3.2
	2000, 18276, 3.0
	4000, 38201, 9.4
	8000, 82705, 53.8
	16000, 178232, 251.6

	p.algorithm2(data); int[] sizes = {12500, 25000, 50000, 100000, 200000, 400000,800000,1600000};
	12500, 161997, 0.0
	25000, 337790, 3.2
	50000, 723121, 6.2
	100000, 1559005, 15.6
	200000, 3190958, 28.2
	400000, 6782560, 71.8
	800000, 13795207, 165.8
	1600000, 29643913, 367.2
	
	p.algorithm3(data); int[] sizes = {50000, 100000, 200000, 400000, 800000, 1600000, 3200000, 6400000};
	50000, 250000, 0.0
	100000, 500000, 3.2
	200000, 1000000, 3.2
	400000, 2000000, 9.2
	800000, 4000000, 15.8
	1600000, 8000000, 40.6
	3200000, 16000000, 134.2
	6400000, 32000000, 304.8

C) 3>2>1
D) By the equation, 3 reigns over the other two. However, 2's coefficient if way higher than 1's.
 	Which is why 1 ends up being more efficient memory-wise.
	
	